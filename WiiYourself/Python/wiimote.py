# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_wiimote', [dirname(__file__)])
        except ImportError:
            import _wiimote
            return _wiimote
        if fp is not None:
            try:
                _mod = imp.load_module('_wiimote', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _wiimote = swig_import_helper()
    del swig_import_helper
else:
    import _wiimote
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


FREQ_NONE = _wiimote.FREQ_NONE
FREQ_4200HZ = _wiimote.FREQ_4200HZ
FREQ_3920HZ = _wiimote.FREQ_3920HZ
FREQ_3640HZ = _wiimote.FREQ_3640HZ
FREQ_3360HZ = _wiimote.FREQ_3360HZ
FREQ_3130HZ = _wiimote.FREQ_3130HZ
FREQ_2940HZ = _wiimote.FREQ_2940HZ
FREQ_2760HZ = _wiimote.FREQ_2760HZ
FREQ_2610HZ = _wiimote.FREQ_2610HZ
FREQ_2470HZ = _wiimote.FREQ_2470HZ
class wiimote_sample(_object):
    """Proxy of C++ wiimote_sample class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wiimote_sample, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wiimote_sample, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> wiimote_sample"""
        this = _wiimote.new_wiimote_sample()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["samples"] = _wiimote.wiimote_sample_samples_set
    __swig_getmethods__["samples"] = _wiimote.wiimote_sample_samples_get
    if _newclass:samples = _swig_property(_wiimote.wiimote_sample_samples_get, _wiimote.wiimote_sample_samples_set)
    __swig_setmethods__["length"] = _wiimote.wiimote_sample_length_set
    __swig_getmethods__["length"] = _wiimote.wiimote_sample_length_get
    if _newclass:length = _swig_property(_wiimote.wiimote_sample_length_get, _wiimote.wiimote_sample_length_set)
    __swig_setmethods__["freq"] = _wiimote.wiimote_sample_freq_set
    __swig_getmethods__["freq"] = _wiimote.wiimote_sample_freq_get
    if _newclass:freq = _swig_property(_wiimote.wiimote_sample_freq_get, _wiimote.wiimote_sample_freq_set)
    __swig_destroy__ = _wiimote.delete_wiimote_sample
    __del__ = lambda self : None;
wiimote_sample_swigregister = _wiimote.wiimote_sample_swigregister
wiimote_sample_swigregister(wiimote_sample)

NO_CHANGE = _wiimote.NO_CHANGE
CONNECTED = _wiimote.CONNECTED
CONNECTION_LOST = _wiimote.CONNECTION_LOST
BATTERY_CHANGED = _wiimote.BATTERY_CHANGED
BATTERY_DRAINED = _wiimote.BATTERY_DRAINED
LEDS_CHANGED = _wiimote.LEDS_CHANGED
BUTTONS_CHANGED = _wiimote.BUTTONS_CHANGED
ACCEL_CHANGED = _wiimote.ACCEL_CHANGED
ORIENTATION_CHANGED = _wiimote.ORIENTATION_CHANGED
IR_CHANGED = _wiimote.IR_CHANGED
WIIMOTE_CHANGED = _wiimote.WIIMOTE_CHANGED
NUNCHUK_CONNECTED = _wiimote.NUNCHUK_CONNECTED
NUNCHUK_BUTTONS_CHANGED = _wiimote.NUNCHUK_BUTTONS_CHANGED
NUNCHUK_ACCEL_CHANGED = _wiimote.NUNCHUK_ACCEL_CHANGED
NUNCHUK_ORIENTATION_CHANGED = _wiimote.NUNCHUK_ORIENTATION_CHANGED
NUNCHUK_JOYSTICK_CHANGED = _wiimote.NUNCHUK_JOYSTICK_CHANGED
NUNCHUK_CHANGED = _wiimote.NUNCHUK_CHANGED
CLASSIC_CONNECTED = _wiimote.CLASSIC_CONNECTED
CLASSIC_BUTTONS_CHANGED = _wiimote.CLASSIC_BUTTONS_CHANGED
CLASSIC_JOYSTICK_L_CHANGED = _wiimote.CLASSIC_JOYSTICK_L_CHANGED
CLASSIC_JOYSTICK_R_CHANGED = _wiimote.CLASSIC_JOYSTICK_R_CHANGED
CLASSIC_TRIGGERS_CHANGED = _wiimote.CLASSIC_TRIGGERS_CHANGED
CLASSIC_CHANGED = _wiimote.CLASSIC_CHANGED
BALANCE_CONNECTED = _wiimote.BALANCE_CONNECTED
BALANCE_WEIGHT_CHANGED = _wiimote.BALANCE_WEIGHT_CHANGED
BALANCE_CHANGED = _wiimote.BALANCE_CHANGED
MOTIONPLUS_DETECTED = _wiimote.MOTIONPLUS_DETECTED
MOTIONPLUS_ENABLED = _wiimote.MOTIONPLUS_ENABLED
MOTIONPLUS_SPEED_CHANGED = _wiimote.MOTIONPLUS_SPEED_CHANGED
MOTIONPLUS_EXTENSION_CONNECTED = _wiimote.MOTIONPLUS_EXTENSION_CONNECTED
MOTIONPLUS_EXTENSION_DISCONNECTED = _wiimote.MOTIONPLUS_EXTENSION_DISCONNECTED
MOTIONPLUS_CHANGED = _wiimote.MOTIONPLUS_CHANGED
EXTENSION_DISCONNECTED = _wiimote.EXTENSION_DISCONNECTED
EXTENSION_PARTIALLY_INSERTED = _wiimote.EXTENSION_PARTIALLY_INSERTED
EXTENSION_CONNECTED = _wiimote.EXTENSION_CONNECTED
EXTENSION_CHANGED = _wiimote.EXTENSION_CHANGED
CHANGED_ALL = _wiimote.CHANGED_ALL
class wiimote_state__calibration_info(_object):
    """Proxy of C++ wiimote_state__calibration_info class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wiimote_state__calibration_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wiimote_state__calibration_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["X0"] = _wiimote.wiimote_state__calibration_info_X0_set
    __swig_getmethods__["X0"] = _wiimote.wiimote_state__calibration_info_X0_get
    if _newclass:X0 = _swig_property(_wiimote.wiimote_state__calibration_info_X0_get, _wiimote.wiimote_state__calibration_info_X0_set)
    __swig_setmethods__["Y0"] = _wiimote.wiimote_state__calibration_info_Y0_set
    __swig_getmethods__["Y0"] = _wiimote.wiimote_state__calibration_info_Y0_get
    if _newclass:Y0 = _swig_property(_wiimote.wiimote_state__calibration_info_Y0_get, _wiimote.wiimote_state__calibration_info_Y0_set)
    __swig_setmethods__["Z0"] = _wiimote.wiimote_state__calibration_info_Z0_set
    __swig_getmethods__["Z0"] = _wiimote.wiimote_state__calibration_info_Z0_get
    if _newclass:Z0 = _swig_property(_wiimote.wiimote_state__calibration_info_Z0_get, _wiimote.wiimote_state__calibration_info_Z0_set)
    __swig_setmethods__["XG"] = _wiimote.wiimote_state__calibration_info_XG_set
    __swig_getmethods__["XG"] = _wiimote.wiimote_state__calibration_info_XG_get
    if _newclass:XG = _swig_property(_wiimote.wiimote_state__calibration_info_XG_get, _wiimote.wiimote_state__calibration_info_XG_set)
    __swig_setmethods__["YG"] = _wiimote.wiimote_state__calibration_info_YG_set
    __swig_getmethods__["YG"] = _wiimote.wiimote_state__calibration_info_YG_get
    if _newclass:YG = _swig_property(_wiimote.wiimote_state__calibration_info_YG_get, _wiimote.wiimote_state__calibration_info_YG_set)
    __swig_setmethods__["ZG"] = _wiimote.wiimote_state__calibration_info_ZG_set
    __swig_getmethods__["ZG"] = _wiimote.wiimote_state__calibration_info_ZG_get
    if _newclass:ZG = _swig_property(_wiimote.wiimote_state__calibration_info_ZG_get, _wiimote.wiimote_state__calibration_info_ZG_set)
    def __init__(self): 
        """__init__(self) -> wiimote_state__calibration_info"""
        this = _wiimote.new_wiimote_state__calibration_info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wiimote.delete_wiimote_state__calibration_info
    __del__ = lambda self : None;
wiimote_state__calibration_info_swigregister = _wiimote.wiimote_state__calibration_info_swigregister
wiimote_state__calibration_info_swigregister(wiimote_state__calibration_info)

class wiimote_state__buttons(_object):
    """Proxy of C++ wiimote_state__buttons class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wiimote_state__buttons, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wiimote_state__buttons, name)
    __repr__ = _swig_repr
    def A(self):
        """A(self) -> bool"""
        return _wiimote.wiimote_state__buttons_A(self)

    def B(self):
        """B(self) -> bool"""
        return _wiimote.wiimote_state__buttons_B(self)

    def Plus(self):
        """Plus(self) -> bool"""
        return _wiimote.wiimote_state__buttons_Plus(self)

    def Home(self):
        """Home(self) -> bool"""
        return _wiimote.wiimote_state__buttons_Home(self)

    def Minus(self):
        """Minus(self) -> bool"""
        return _wiimote.wiimote_state__buttons_Minus(self)

    def One(self):
        """One(self) -> bool"""
        return _wiimote.wiimote_state__buttons_One(self)

    def Two(self):
        """Two(self) -> bool"""
        return _wiimote.wiimote_state__buttons_Two(self)

    def Up(self):
        """Up(self) -> bool"""
        return _wiimote.wiimote_state__buttons_Up(self)

    def Down(self):
        """Down(self) -> bool"""
        return _wiimote.wiimote_state__buttons_Down(self)

    def Left(self):
        """Left(self) -> bool"""
        return _wiimote.wiimote_state__buttons_Left(self)

    def Right(self):
        """Right(self) -> bool"""
        return _wiimote.wiimote_state__buttons_Right(self)

    __swig_setmethods__["Bits"] = _wiimote.wiimote_state__buttons_Bits_set
    __swig_getmethods__["Bits"] = _wiimote.wiimote_state__buttons_Bits_get
    if _newclass:Bits = _swig_property(_wiimote.wiimote_state__buttons_Bits_get, _wiimote.wiimote_state__buttons_Bits_set)
    LEFT = _wiimote.wiimote_state__buttons_LEFT
    RIGHT = _wiimote.wiimote_state__buttons_RIGHT
    DOWN = _wiimote.wiimote_state__buttons_DOWN
    UP = _wiimote.wiimote_state__buttons_UP
    PLUS = _wiimote.wiimote_state__buttons_PLUS
    TWO = _wiimote.wiimote_state__buttons_TWO
    ONE = _wiimote.wiimote_state__buttons_ONE
    _B = _wiimote.wiimote_state__buttons__B
    _A = _wiimote.wiimote_state__buttons__A
    MINUS = _wiimote.wiimote_state__buttons_MINUS
    HOME = _wiimote.wiimote_state__buttons_HOME
    ALL = _wiimote.wiimote_state__buttons_ALL
    def __init__(self): 
        """__init__(self) -> wiimote_state__buttons"""
        this = _wiimote.new_wiimote_state__buttons()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wiimote.delete_wiimote_state__buttons
    __del__ = lambda self : None;
wiimote_state__buttons_swigregister = _wiimote.wiimote_state__buttons_swigregister
wiimote_state__buttons_swigregister(wiimote_state__buttons)

class wiimote_state__acceleration__orientation(_object):
    """Proxy of C++ wiimote_state__acceleration__orientation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wiimote_state__acceleration__orientation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wiimote_state__acceleration__orientation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["X"] = _wiimote.wiimote_state__acceleration__orientation_X_set
    __swig_getmethods__["X"] = _wiimote.wiimote_state__acceleration__orientation_X_get
    if _newclass:X = _swig_property(_wiimote.wiimote_state__acceleration__orientation_X_get, _wiimote.wiimote_state__acceleration__orientation_X_set)
    __swig_setmethods__["Y"] = _wiimote.wiimote_state__acceleration__orientation_Y_set
    __swig_getmethods__["Y"] = _wiimote.wiimote_state__acceleration__orientation_Y_get
    if _newclass:Y = _swig_property(_wiimote.wiimote_state__acceleration__orientation_Y_get, _wiimote.wiimote_state__acceleration__orientation_Y_set)
    __swig_setmethods__["Z"] = _wiimote.wiimote_state__acceleration__orientation_Z_set
    __swig_getmethods__["Z"] = _wiimote.wiimote_state__acceleration__orientation_Z_get
    if _newclass:Z = _swig_property(_wiimote.wiimote_state__acceleration__orientation_Z_get, _wiimote.wiimote_state__acceleration__orientation_Z_set)
    __swig_setmethods__["UpdateAge"] = _wiimote.wiimote_state__acceleration__orientation_UpdateAge_set
    __swig_getmethods__["UpdateAge"] = _wiimote.wiimote_state__acceleration__orientation_UpdateAge_get
    if _newclass:UpdateAge = _swig_property(_wiimote.wiimote_state__acceleration__orientation_UpdateAge_get, _wiimote.wiimote_state__acceleration__orientation_UpdateAge_set)
    __swig_setmethods__["Pitch"] = _wiimote.wiimote_state__acceleration__orientation_Pitch_set
    __swig_getmethods__["Pitch"] = _wiimote.wiimote_state__acceleration__orientation_Pitch_get
    if _newclass:Pitch = _swig_property(_wiimote.wiimote_state__acceleration__orientation_Pitch_get, _wiimote.wiimote_state__acceleration__orientation_Pitch_set)
    __swig_setmethods__["Roll"] = _wiimote.wiimote_state__acceleration__orientation_Roll_set
    __swig_getmethods__["Roll"] = _wiimote.wiimote_state__acceleration__orientation_Roll_get
    if _newclass:Roll = _swig_property(_wiimote.wiimote_state__acceleration__orientation_Roll_get, _wiimote.wiimote_state__acceleration__orientation_Roll_set)
    def __init__(self): 
        """__init__(self) -> wiimote_state__acceleration__orientation"""
        this = _wiimote.new_wiimote_state__acceleration__orientation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wiimote.delete_wiimote_state__acceleration__orientation
    __del__ = lambda self : None;
wiimote_state__acceleration__orientation_swigregister = _wiimote.wiimote_state__acceleration__orientation_swigregister
wiimote_state__acceleration__orientation_swigregister(wiimote_state__acceleration__orientation)

class wiimote_state__acceleration(_object):
    """Proxy of C++ wiimote_state__acceleration class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wiimote_state__acceleration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wiimote_state__acceleration, name)
    __repr__ = _swig_repr
    __swig_setmethods__["RawX"] = _wiimote.wiimote_state__acceleration_RawX_set
    __swig_getmethods__["RawX"] = _wiimote.wiimote_state__acceleration_RawX_get
    if _newclass:RawX = _swig_property(_wiimote.wiimote_state__acceleration_RawX_get, _wiimote.wiimote_state__acceleration_RawX_set)
    __swig_setmethods__["RawY"] = _wiimote.wiimote_state__acceleration_RawY_set
    __swig_getmethods__["RawY"] = _wiimote.wiimote_state__acceleration_RawY_get
    if _newclass:RawY = _swig_property(_wiimote.wiimote_state__acceleration_RawY_get, _wiimote.wiimote_state__acceleration_RawY_set)
    __swig_setmethods__["RawZ"] = _wiimote.wiimote_state__acceleration_RawZ_set
    __swig_getmethods__["RawZ"] = _wiimote.wiimote_state__acceleration_RawZ_get
    if _newclass:RawZ = _swig_property(_wiimote.wiimote_state__acceleration_RawZ_get, _wiimote.wiimote_state__acceleration_RawZ_set)
    __swig_setmethods__["X"] = _wiimote.wiimote_state__acceleration_X_set
    __swig_getmethods__["X"] = _wiimote.wiimote_state__acceleration_X_get
    if _newclass:X = _swig_property(_wiimote.wiimote_state__acceleration_X_get, _wiimote.wiimote_state__acceleration_X_set)
    __swig_setmethods__["Y"] = _wiimote.wiimote_state__acceleration_Y_set
    __swig_getmethods__["Y"] = _wiimote.wiimote_state__acceleration_Y_get
    if _newclass:Y = _swig_property(_wiimote.wiimote_state__acceleration_Y_get, _wiimote.wiimote_state__acceleration_Y_set)
    __swig_setmethods__["Z"] = _wiimote.wiimote_state__acceleration_Z_set
    __swig_getmethods__["Z"] = _wiimote.wiimote_state__acceleration_Z_get
    if _newclass:Z = _swig_property(_wiimote.wiimote_state__acceleration_Z_get, _wiimote.wiimote_state__acceleration_Z_set)
    __swig_setmethods__["Orientation"] = _wiimote.wiimote_state__acceleration_Orientation_set
    __swig_getmethods__["Orientation"] = _wiimote.wiimote_state__acceleration_Orientation_get
    if _newclass:Orientation = _swig_property(_wiimote.wiimote_state__acceleration_Orientation_get, _wiimote.wiimote_state__acceleration_Orientation_set)
    def __init__(self): 
        """__init__(self) -> wiimote_state__acceleration"""
        this = _wiimote.new_wiimote_state__acceleration()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wiimote.delete_wiimote_state__acceleration
    __del__ = lambda self : None;
wiimote_state__acceleration_swigregister = _wiimote.wiimote_state__acceleration_swigregister
wiimote_state__acceleration_swigregister(wiimote_state__acceleration)

class wiimote_state__ir__dot(_object):
    """Proxy of C++ wiimote_state__ir__dot class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wiimote_state__ir__dot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wiimote_state__ir__dot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bVisible"] = _wiimote.wiimote_state__ir__dot_bVisible_set
    __swig_getmethods__["bVisible"] = _wiimote.wiimote_state__ir__dot_bVisible_get
    if _newclass:bVisible = _swig_property(_wiimote.wiimote_state__ir__dot_bVisible_get, _wiimote.wiimote_state__ir__dot_bVisible_set)
    __swig_setmethods__["RawX"] = _wiimote.wiimote_state__ir__dot_RawX_set
    __swig_getmethods__["RawX"] = _wiimote.wiimote_state__ir__dot_RawX_get
    if _newclass:RawX = _swig_property(_wiimote.wiimote_state__ir__dot_RawX_get, _wiimote.wiimote_state__ir__dot_RawX_set)
    __swig_setmethods__["RawY"] = _wiimote.wiimote_state__ir__dot_RawY_set
    __swig_getmethods__["RawY"] = _wiimote.wiimote_state__ir__dot_RawY_get
    if _newclass:RawY = _swig_property(_wiimote.wiimote_state__ir__dot_RawY_get, _wiimote.wiimote_state__ir__dot_RawY_set)
    __swig_setmethods__["X"] = _wiimote.wiimote_state__ir__dot_X_set
    __swig_getmethods__["X"] = _wiimote.wiimote_state__ir__dot_X_get
    if _newclass:X = _swig_property(_wiimote.wiimote_state__ir__dot_X_get, _wiimote.wiimote_state__ir__dot_X_set)
    __swig_setmethods__["Y"] = _wiimote.wiimote_state__ir__dot_Y_set
    __swig_getmethods__["Y"] = _wiimote.wiimote_state__ir__dot_Y_get
    if _newclass:Y = _swig_property(_wiimote.wiimote_state__ir__dot_Y_get, _wiimote.wiimote_state__ir__dot_Y_set)
    __swig_setmethods__["Size"] = _wiimote.wiimote_state__ir__dot_Size_set
    __swig_getmethods__["Size"] = _wiimote.wiimote_state__ir__dot_Size_get
    if _newclass:Size = _swig_property(_wiimote.wiimote_state__ir__dot_Size_get, _wiimote.wiimote_state__ir__dot_Size_set)
    def __init__(self): 
        """__init__(self) -> wiimote_state__ir__dot"""
        this = _wiimote.new_wiimote_state__ir__dot()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wiimote.delete_wiimote_state__ir__dot
    __del__ = lambda self : None;
wiimote_state__ir__dot_swigregister = _wiimote.wiimote_state__ir__dot_swigregister
wiimote_state__ir__dot_swigregister(wiimote_state__ir__dot)

class wiimote_state__ir(_object):
    """Proxy of C++ wiimote_state__ir class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wiimote_state__ir, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wiimote_state__ir, name)
    __repr__ = _swig_repr
    MAX_RAW_X = _wiimote.wiimote_state__ir_MAX_RAW_X
    MAX_RAW_Y = _wiimote.wiimote_state__ir_MAX_RAW_Y
    OFF = _wiimote.wiimote_state__ir_OFF
    BASIC = _wiimote.wiimote_state__ir_BASIC
    EXTENDED = _wiimote.wiimote_state__ir_EXTENDED
    FULL = _wiimote.wiimote_state__ir_FULL
    __swig_setmethods__["Mode"] = _wiimote.wiimote_state__ir_Mode_set
    __swig_getmethods__["Mode"] = _wiimote.wiimote_state__ir_Mode_get
    if _newclass:Mode = _swig_property(_wiimote.wiimote_state__ir_Mode_get, _wiimote.wiimote_state__ir_Mode_set)
    __swig_setmethods__["Dot"] = _wiimote.wiimote_state__ir_Dot_set
    __swig_getmethods__["Dot"] = _wiimote.wiimote_state__ir_Dot_get
    if _newclass:Dot = _swig_property(_wiimote.wiimote_state__ir_Dot_get, _wiimote.wiimote_state__ir_Dot_set)
    def __init__(self): 
        """__init__(self) -> wiimote_state__ir"""
        this = _wiimote.new_wiimote_state__ir()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wiimote.delete_wiimote_state__ir
    __del__ = lambda self : None;
wiimote_state__ir_swigregister = _wiimote.wiimote_state__ir_swigregister
wiimote_state__ir_swigregister(wiimote_state__ir)

class wiimote_state__leds(_object):
    """Proxy of C++ wiimote_state__leds class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wiimote_state__leds, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wiimote_state__leds, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Bits"] = _wiimote.wiimote_state__leds_Bits_set
    __swig_getmethods__["Bits"] = _wiimote.wiimote_state__leds_Bits_get
    if _newclass:Bits = _swig_property(_wiimote.wiimote_state__leds_Bits_get, _wiimote.wiimote_state__leds_Bits_set)
    def Lit(self, *args):
        """Lit(self, unsigned int index) -> bool"""
        return _wiimote.wiimote_state__leds_Lit(self, *args)

    def __init__(self): 
        """__init__(self) -> wiimote_state__leds"""
        this = _wiimote.new_wiimote_state__leds()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wiimote.delete_wiimote_state__leds
    __del__ = lambda self : None;
wiimote_state__leds_swigregister = _wiimote.wiimote_state__leds_swigregister
wiimote_state__leds_swigregister(wiimote_state__leds)

class wiimote_state__speaker(_object):
    """Proxy of C++ wiimote_state__speaker class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wiimote_state__speaker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wiimote_state__speaker, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bEnabled"] = _wiimote.wiimote_state__speaker_bEnabled_set
    __swig_getmethods__["bEnabled"] = _wiimote.wiimote_state__speaker_bEnabled_get
    if _newclass:bEnabled = _swig_property(_wiimote.wiimote_state__speaker_bEnabled_get, _wiimote.wiimote_state__speaker_bEnabled_set)
    __swig_setmethods__["bMuted"] = _wiimote.wiimote_state__speaker_bMuted_set
    __swig_getmethods__["bMuted"] = _wiimote.wiimote_state__speaker_bMuted_get
    if _newclass:bMuted = _swig_property(_wiimote.wiimote_state__speaker_bMuted_get, _wiimote.wiimote_state__speaker_bMuted_set)
    __swig_setmethods__["Freq"] = _wiimote.wiimote_state__speaker_Freq_set
    __swig_getmethods__["Freq"] = _wiimote.wiimote_state__speaker_Freq_get
    if _newclass:Freq = _swig_property(_wiimote.wiimote_state__speaker_Freq_get, _wiimote.wiimote_state__speaker_Freq_set)
    __swig_setmethods__["Volume"] = _wiimote.wiimote_state__speaker_Volume_set
    __swig_getmethods__["Volume"] = _wiimote.wiimote_state__speaker_Volume_get
    if _newclass:Volume = _swig_property(_wiimote.wiimote_state__speaker_Volume_get, _wiimote.wiimote_state__speaker_Volume_set)
    def __init__(self): 
        """__init__(self) -> wiimote_state__speaker"""
        this = _wiimote.new_wiimote_state__speaker()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wiimote.delete_wiimote_state__speaker
    __del__ = lambda self : None;
wiimote_state__speaker_swigregister = _wiimote.wiimote_state__speaker_swigregister
wiimote_state__speaker_swigregister(wiimote_state__speaker)

class wiimote_state__joystick__deadzone(_object):
    """Proxy of C++ wiimote_state__joystick__deadzone class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wiimote_state__joystick__deadzone, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wiimote_state__joystick__deadzone, name)
    __repr__ = _swig_repr
    __swig_setmethods__["X"] = _wiimote.wiimote_state__joystick__deadzone_X_set
    __swig_getmethods__["X"] = _wiimote.wiimote_state__joystick__deadzone_X_get
    if _newclass:X = _swig_property(_wiimote.wiimote_state__joystick__deadzone_X_get, _wiimote.wiimote_state__joystick__deadzone_X_set)
    __swig_setmethods__["Y"] = _wiimote.wiimote_state__joystick__deadzone_Y_set
    __swig_getmethods__["Y"] = _wiimote.wiimote_state__joystick__deadzone_Y_get
    if _newclass:Y = _swig_property(_wiimote.wiimote_state__joystick__deadzone_Y_get, _wiimote.wiimote_state__joystick__deadzone_Y_set)
    def __init__(self): 
        """__init__(self) -> wiimote_state__joystick__deadzone"""
        this = _wiimote.new_wiimote_state__joystick__deadzone()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wiimote.delete_wiimote_state__joystick__deadzone
    __del__ = lambda self : None;
wiimote_state__joystick__deadzone_swigregister = _wiimote.wiimote_state__joystick__deadzone_swigregister
wiimote_state__joystick__deadzone_swigregister(wiimote_state__joystick__deadzone)

class wiimote_state__joystick(_object):
    """Proxy of C++ wiimote_state__joystick class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wiimote_state__joystick, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wiimote_state__joystick, name)
    __repr__ = _swig_repr
    __swig_setmethods__["RawX"] = _wiimote.wiimote_state__joystick_RawX_set
    __swig_getmethods__["RawX"] = _wiimote.wiimote_state__joystick_RawX_get
    if _newclass:RawX = _swig_property(_wiimote.wiimote_state__joystick_RawX_get, _wiimote.wiimote_state__joystick_RawX_set)
    __swig_setmethods__["RawY"] = _wiimote.wiimote_state__joystick_RawY_set
    __swig_getmethods__["RawY"] = _wiimote.wiimote_state__joystick_RawY_get
    if _newclass:RawY = _swig_property(_wiimote.wiimote_state__joystick_RawY_get, _wiimote.wiimote_state__joystick_RawY_set)
    __swig_setmethods__["X"] = _wiimote.wiimote_state__joystick_X_set
    __swig_getmethods__["X"] = _wiimote.wiimote_state__joystick_X_get
    if _newclass:X = _swig_property(_wiimote.wiimote_state__joystick_X_get, _wiimote.wiimote_state__joystick_X_set)
    __swig_setmethods__["Y"] = _wiimote.wiimote_state__joystick_Y_set
    __swig_getmethods__["Y"] = _wiimote.wiimote_state__joystick_Y_get
    if _newclass:Y = _swig_property(_wiimote.wiimote_state__joystick_Y_get, _wiimote.wiimote_state__joystick_Y_set)
    __swig_setmethods__["DeadZone"] = _wiimote.wiimote_state__joystick_DeadZone_set
    __swig_getmethods__["DeadZone"] = _wiimote.wiimote_state__joystick_DeadZone_get
    if _newclass:DeadZone = _swig_property(_wiimote.wiimote_state__joystick_DeadZone_get, _wiimote.wiimote_state__joystick_DeadZone_set)
    def __init__(self): 
        """__init__(self) -> wiimote_state__joystick"""
        this = _wiimote.new_wiimote_state__joystick()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wiimote.delete_wiimote_state__joystick
    __del__ = lambda self : None;
wiimote_state__joystick_swigregister = _wiimote.wiimote_state__joystick_swigregister
wiimote_state__joystick_swigregister(wiimote_state__joystick)

class wiimote_state__nunchuk__calibration_info(_object):
    """Proxy of C++ wiimote_state__nunchuk__calibration_info class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wiimote_state__nunchuk__calibration_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wiimote_state__nunchuk__calibration_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["X0"] = _wiimote.wiimote_state__nunchuk__calibration_info_X0_set
    __swig_getmethods__["X0"] = _wiimote.wiimote_state__nunchuk__calibration_info_X0_get
    if _newclass:X0 = _swig_property(_wiimote.wiimote_state__nunchuk__calibration_info_X0_get, _wiimote.wiimote_state__nunchuk__calibration_info_X0_set)
    __swig_setmethods__["Y0"] = _wiimote.wiimote_state__nunchuk__calibration_info_Y0_set
    __swig_getmethods__["Y0"] = _wiimote.wiimote_state__nunchuk__calibration_info_Y0_get
    if _newclass:Y0 = _swig_property(_wiimote.wiimote_state__nunchuk__calibration_info_Y0_get, _wiimote.wiimote_state__nunchuk__calibration_info_Y0_set)
    __swig_setmethods__["Z0"] = _wiimote.wiimote_state__nunchuk__calibration_info_Z0_set
    __swig_getmethods__["Z0"] = _wiimote.wiimote_state__nunchuk__calibration_info_Z0_get
    if _newclass:Z0 = _swig_property(_wiimote.wiimote_state__nunchuk__calibration_info_Z0_get, _wiimote.wiimote_state__nunchuk__calibration_info_Z0_set)
    __swig_setmethods__["XG"] = _wiimote.wiimote_state__nunchuk__calibration_info_XG_set
    __swig_getmethods__["XG"] = _wiimote.wiimote_state__nunchuk__calibration_info_XG_get
    if _newclass:XG = _swig_property(_wiimote.wiimote_state__nunchuk__calibration_info_XG_get, _wiimote.wiimote_state__nunchuk__calibration_info_XG_set)
    __swig_setmethods__["YG"] = _wiimote.wiimote_state__nunchuk__calibration_info_YG_set
    __swig_getmethods__["YG"] = _wiimote.wiimote_state__nunchuk__calibration_info_YG_get
    if _newclass:YG = _swig_property(_wiimote.wiimote_state__nunchuk__calibration_info_YG_get, _wiimote.wiimote_state__nunchuk__calibration_info_YG_set)
    __swig_setmethods__["ZG"] = _wiimote.wiimote_state__nunchuk__calibration_info_ZG_set
    __swig_getmethods__["ZG"] = _wiimote.wiimote_state__nunchuk__calibration_info_ZG_get
    if _newclass:ZG = _swig_property(_wiimote.wiimote_state__nunchuk__calibration_info_ZG_get, _wiimote.wiimote_state__nunchuk__calibration_info_ZG_set)
    __swig_setmethods__["MinX"] = _wiimote.wiimote_state__nunchuk__calibration_info_MinX_set
    __swig_getmethods__["MinX"] = _wiimote.wiimote_state__nunchuk__calibration_info_MinX_get
    if _newclass:MinX = _swig_property(_wiimote.wiimote_state__nunchuk__calibration_info_MinX_get, _wiimote.wiimote_state__nunchuk__calibration_info_MinX_set)
    __swig_setmethods__["MidX"] = _wiimote.wiimote_state__nunchuk__calibration_info_MidX_set
    __swig_getmethods__["MidX"] = _wiimote.wiimote_state__nunchuk__calibration_info_MidX_get
    if _newclass:MidX = _swig_property(_wiimote.wiimote_state__nunchuk__calibration_info_MidX_get, _wiimote.wiimote_state__nunchuk__calibration_info_MidX_set)
    __swig_setmethods__["MaxX"] = _wiimote.wiimote_state__nunchuk__calibration_info_MaxX_set
    __swig_getmethods__["MaxX"] = _wiimote.wiimote_state__nunchuk__calibration_info_MaxX_get
    if _newclass:MaxX = _swig_property(_wiimote.wiimote_state__nunchuk__calibration_info_MaxX_get, _wiimote.wiimote_state__nunchuk__calibration_info_MaxX_set)
    __swig_setmethods__["MinY"] = _wiimote.wiimote_state__nunchuk__calibration_info_MinY_set
    __swig_getmethods__["MinY"] = _wiimote.wiimote_state__nunchuk__calibration_info_MinY_get
    if _newclass:MinY = _swig_property(_wiimote.wiimote_state__nunchuk__calibration_info_MinY_get, _wiimote.wiimote_state__nunchuk__calibration_info_MinY_set)
    __swig_setmethods__["MidY"] = _wiimote.wiimote_state__nunchuk__calibration_info_MidY_set
    __swig_getmethods__["MidY"] = _wiimote.wiimote_state__nunchuk__calibration_info_MidY_get
    if _newclass:MidY = _swig_property(_wiimote.wiimote_state__nunchuk__calibration_info_MidY_get, _wiimote.wiimote_state__nunchuk__calibration_info_MidY_set)
    __swig_setmethods__["MaxY"] = _wiimote.wiimote_state__nunchuk__calibration_info_MaxY_set
    __swig_getmethods__["MaxY"] = _wiimote.wiimote_state__nunchuk__calibration_info_MaxY_get
    if _newclass:MaxY = _swig_property(_wiimote.wiimote_state__nunchuk__calibration_info_MaxY_get, _wiimote.wiimote_state__nunchuk__calibration_info_MaxY_set)
    def __init__(self): 
        """__init__(self) -> wiimote_state__nunchuk__calibration_info"""
        this = _wiimote.new_wiimote_state__nunchuk__calibration_info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wiimote.delete_wiimote_state__nunchuk__calibration_info
    __del__ = lambda self : None;
wiimote_state__nunchuk__calibration_info_swigregister = _wiimote.wiimote_state__nunchuk__calibration_info_swigregister
wiimote_state__nunchuk__calibration_info_swigregister(wiimote_state__nunchuk__calibration_info)

class wiimote_state__nunchuk(_object):
    """Proxy of C++ wiimote_state__nunchuk class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wiimote_state__nunchuk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wiimote_state__nunchuk, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CalibrationInfo"] = _wiimote.wiimote_state__nunchuk_CalibrationInfo_set
    __swig_getmethods__["CalibrationInfo"] = _wiimote.wiimote_state__nunchuk_CalibrationInfo_get
    if _newclass:CalibrationInfo = _swig_property(_wiimote.wiimote_state__nunchuk_CalibrationInfo_get, _wiimote.wiimote_state__nunchuk_CalibrationInfo_set)
    __swig_setmethods__["Acceleration"] = _wiimote.wiimote_state__nunchuk_Acceleration_set
    __swig_getmethods__["Acceleration"] = _wiimote.wiimote_state__nunchuk_Acceleration_get
    if _newclass:Acceleration = _swig_property(_wiimote.wiimote_state__nunchuk_Acceleration_get, _wiimote.wiimote_state__nunchuk_Acceleration_set)
    __swig_setmethods__["Joystick"] = _wiimote.wiimote_state__nunchuk_Joystick_set
    __swig_getmethods__["Joystick"] = _wiimote.wiimote_state__nunchuk_Joystick_get
    if _newclass:Joystick = _swig_property(_wiimote.wiimote_state__nunchuk_Joystick_get, _wiimote.wiimote_state__nunchuk_Joystick_set)
    __swig_setmethods__["C"] = _wiimote.wiimote_state__nunchuk_C_set
    __swig_getmethods__["C"] = _wiimote.wiimote_state__nunchuk_C_get
    if _newclass:C = _swig_property(_wiimote.wiimote_state__nunchuk_C_get, _wiimote.wiimote_state__nunchuk_C_set)
    __swig_setmethods__["Z"] = _wiimote.wiimote_state__nunchuk_Z_set
    __swig_getmethods__["Z"] = _wiimote.wiimote_state__nunchuk_Z_get
    if _newclass:Z = _swig_property(_wiimote.wiimote_state__nunchuk_Z_get, _wiimote.wiimote_state__nunchuk_Z_set)
    def __init__(self): 
        """__init__(self) -> wiimote_state__nunchuk"""
        this = _wiimote.new_wiimote_state__nunchuk()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wiimote.delete_wiimote_state__nunchuk
    __del__ = lambda self : None;
wiimote_state__nunchuk_swigregister = _wiimote.wiimote_state__nunchuk_swigregister
wiimote_state__nunchuk_swigregister(wiimote_state__nunchuk)

class wiimote_state__classic_controller__calibration_info(_object):
    """Proxy of C++ wiimote_state__classic_controller__calibration_info class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wiimote_state__classic_controller__calibration_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wiimote_state__classic_controller__calibration_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["MinXL"] = _wiimote.wiimote_state__classic_controller__calibration_info_MinXL_set
    __swig_getmethods__["MinXL"] = _wiimote.wiimote_state__classic_controller__calibration_info_MinXL_get
    if _newclass:MinXL = _swig_property(_wiimote.wiimote_state__classic_controller__calibration_info_MinXL_get, _wiimote.wiimote_state__classic_controller__calibration_info_MinXL_set)
    __swig_setmethods__["MidXL"] = _wiimote.wiimote_state__classic_controller__calibration_info_MidXL_set
    __swig_getmethods__["MidXL"] = _wiimote.wiimote_state__classic_controller__calibration_info_MidXL_get
    if _newclass:MidXL = _swig_property(_wiimote.wiimote_state__classic_controller__calibration_info_MidXL_get, _wiimote.wiimote_state__classic_controller__calibration_info_MidXL_set)
    __swig_setmethods__["MaxXL"] = _wiimote.wiimote_state__classic_controller__calibration_info_MaxXL_set
    __swig_getmethods__["MaxXL"] = _wiimote.wiimote_state__classic_controller__calibration_info_MaxXL_get
    if _newclass:MaxXL = _swig_property(_wiimote.wiimote_state__classic_controller__calibration_info_MaxXL_get, _wiimote.wiimote_state__classic_controller__calibration_info_MaxXL_set)
    __swig_setmethods__["MinYL"] = _wiimote.wiimote_state__classic_controller__calibration_info_MinYL_set
    __swig_getmethods__["MinYL"] = _wiimote.wiimote_state__classic_controller__calibration_info_MinYL_get
    if _newclass:MinYL = _swig_property(_wiimote.wiimote_state__classic_controller__calibration_info_MinYL_get, _wiimote.wiimote_state__classic_controller__calibration_info_MinYL_set)
    __swig_setmethods__["MidYL"] = _wiimote.wiimote_state__classic_controller__calibration_info_MidYL_set
    __swig_getmethods__["MidYL"] = _wiimote.wiimote_state__classic_controller__calibration_info_MidYL_get
    if _newclass:MidYL = _swig_property(_wiimote.wiimote_state__classic_controller__calibration_info_MidYL_get, _wiimote.wiimote_state__classic_controller__calibration_info_MidYL_set)
    __swig_setmethods__["MaxYL"] = _wiimote.wiimote_state__classic_controller__calibration_info_MaxYL_set
    __swig_getmethods__["MaxYL"] = _wiimote.wiimote_state__classic_controller__calibration_info_MaxYL_get
    if _newclass:MaxYL = _swig_property(_wiimote.wiimote_state__classic_controller__calibration_info_MaxYL_get, _wiimote.wiimote_state__classic_controller__calibration_info_MaxYL_set)
    __swig_setmethods__["MinXR"] = _wiimote.wiimote_state__classic_controller__calibration_info_MinXR_set
    __swig_getmethods__["MinXR"] = _wiimote.wiimote_state__classic_controller__calibration_info_MinXR_get
    if _newclass:MinXR = _swig_property(_wiimote.wiimote_state__classic_controller__calibration_info_MinXR_get, _wiimote.wiimote_state__classic_controller__calibration_info_MinXR_set)
    __swig_setmethods__["MidXR"] = _wiimote.wiimote_state__classic_controller__calibration_info_MidXR_set
    __swig_getmethods__["MidXR"] = _wiimote.wiimote_state__classic_controller__calibration_info_MidXR_get
    if _newclass:MidXR = _swig_property(_wiimote.wiimote_state__classic_controller__calibration_info_MidXR_get, _wiimote.wiimote_state__classic_controller__calibration_info_MidXR_set)
    __swig_setmethods__["MaxXR"] = _wiimote.wiimote_state__classic_controller__calibration_info_MaxXR_set
    __swig_getmethods__["MaxXR"] = _wiimote.wiimote_state__classic_controller__calibration_info_MaxXR_get
    if _newclass:MaxXR = _swig_property(_wiimote.wiimote_state__classic_controller__calibration_info_MaxXR_get, _wiimote.wiimote_state__classic_controller__calibration_info_MaxXR_set)
    __swig_setmethods__["MinYR"] = _wiimote.wiimote_state__classic_controller__calibration_info_MinYR_set
    __swig_getmethods__["MinYR"] = _wiimote.wiimote_state__classic_controller__calibration_info_MinYR_get
    if _newclass:MinYR = _swig_property(_wiimote.wiimote_state__classic_controller__calibration_info_MinYR_get, _wiimote.wiimote_state__classic_controller__calibration_info_MinYR_set)
    __swig_setmethods__["MidYR"] = _wiimote.wiimote_state__classic_controller__calibration_info_MidYR_set
    __swig_getmethods__["MidYR"] = _wiimote.wiimote_state__classic_controller__calibration_info_MidYR_get
    if _newclass:MidYR = _swig_property(_wiimote.wiimote_state__classic_controller__calibration_info_MidYR_get, _wiimote.wiimote_state__classic_controller__calibration_info_MidYR_set)
    __swig_setmethods__["MaxYR"] = _wiimote.wiimote_state__classic_controller__calibration_info_MaxYR_set
    __swig_getmethods__["MaxYR"] = _wiimote.wiimote_state__classic_controller__calibration_info_MaxYR_get
    if _newclass:MaxYR = _swig_property(_wiimote.wiimote_state__classic_controller__calibration_info_MaxYR_get, _wiimote.wiimote_state__classic_controller__calibration_info_MaxYR_set)
    __swig_setmethods__["MinTriggerL"] = _wiimote.wiimote_state__classic_controller__calibration_info_MinTriggerL_set
    __swig_getmethods__["MinTriggerL"] = _wiimote.wiimote_state__classic_controller__calibration_info_MinTriggerL_get
    if _newclass:MinTriggerL = _swig_property(_wiimote.wiimote_state__classic_controller__calibration_info_MinTriggerL_get, _wiimote.wiimote_state__classic_controller__calibration_info_MinTriggerL_set)
    __swig_setmethods__["MaxTriggerL"] = _wiimote.wiimote_state__classic_controller__calibration_info_MaxTriggerL_set
    __swig_getmethods__["MaxTriggerL"] = _wiimote.wiimote_state__classic_controller__calibration_info_MaxTriggerL_get
    if _newclass:MaxTriggerL = _swig_property(_wiimote.wiimote_state__classic_controller__calibration_info_MaxTriggerL_get, _wiimote.wiimote_state__classic_controller__calibration_info_MaxTriggerL_set)
    __swig_setmethods__["MinTriggerR"] = _wiimote.wiimote_state__classic_controller__calibration_info_MinTriggerR_set
    __swig_getmethods__["MinTriggerR"] = _wiimote.wiimote_state__classic_controller__calibration_info_MinTriggerR_get
    if _newclass:MinTriggerR = _swig_property(_wiimote.wiimote_state__classic_controller__calibration_info_MinTriggerR_get, _wiimote.wiimote_state__classic_controller__calibration_info_MinTriggerR_set)
    __swig_setmethods__["MaxTriggerR"] = _wiimote.wiimote_state__classic_controller__calibration_info_MaxTriggerR_set
    __swig_getmethods__["MaxTriggerR"] = _wiimote.wiimote_state__classic_controller__calibration_info_MaxTriggerR_get
    if _newclass:MaxTriggerR = _swig_property(_wiimote.wiimote_state__classic_controller__calibration_info_MaxTriggerR_get, _wiimote.wiimote_state__classic_controller__calibration_info_MaxTriggerR_set)
    def __init__(self): 
        """__init__(self) -> wiimote_state__classic_controller__calibration_info"""
        this = _wiimote.new_wiimote_state__classic_controller__calibration_info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wiimote.delete_wiimote_state__classic_controller__calibration_info
    __del__ = lambda self : None;
wiimote_state__classic_controller__calibration_info_swigregister = _wiimote.wiimote_state__classic_controller__calibration_info_swigregister
wiimote_state__classic_controller__calibration_info_swigregister(wiimote_state__classic_controller__calibration_info)

class wiimote_state__classic_controller__buttons(_object):
    """Proxy of C++ wiimote_state__classic_controller__buttons class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wiimote_state__classic_controller__buttons, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wiimote_state__classic_controller__buttons, name)
    __repr__ = _swig_repr
    def A(self):
        """A(self) -> bool"""
        return _wiimote.wiimote_state__classic_controller__buttons_A(self)

    def B(self):
        """B(self) -> bool"""
        return _wiimote.wiimote_state__classic_controller__buttons_B(self)

    def Plus(self):
        """Plus(self) -> bool"""
        return _wiimote.wiimote_state__classic_controller__buttons_Plus(self)

    def Minus(self):
        """Minus(self) -> bool"""
        return _wiimote.wiimote_state__classic_controller__buttons_Minus(self)

    def Home(self):
        """Home(self) -> bool"""
        return _wiimote.wiimote_state__classic_controller__buttons_Home(self)

    def Up(self):
        """Up(self) -> bool"""
        return _wiimote.wiimote_state__classic_controller__buttons_Up(self)

    def Down(self):
        """Down(self) -> bool"""
        return _wiimote.wiimote_state__classic_controller__buttons_Down(self)

    def Left(self):
        """Left(self) -> bool"""
        return _wiimote.wiimote_state__classic_controller__buttons_Left(self)

    def Right(self):
        """Right(self) -> bool"""
        return _wiimote.wiimote_state__classic_controller__buttons_Right(self)

    def X(self):
        """X(self) -> bool"""
        return _wiimote.wiimote_state__classic_controller__buttons_X(self)

    def Y(self):
        """Y(self) -> bool"""
        return _wiimote.wiimote_state__classic_controller__buttons_Y(self)

    def ZL(self):
        """ZL(self) -> bool"""
        return _wiimote.wiimote_state__classic_controller__buttons_ZL(self)

    def ZR(self):
        """ZR(self) -> bool"""
        return _wiimote.wiimote_state__classic_controller__buttons_ZR(self)

    def TriggerL(self):
        """TriggerL(self) -> bool"""
        return _wiimote.wiimote_state__classic_controller__buttons_TriggerL(self)

    def TriggerR(self):
        """TriggerR(self) -> bool"""
        return _wiimote.wiimote_state__classic_controller__buttons_TriggerR(self)

    __swig_setmethods__["Bits"] = _wiimote.wiimote_state__classic_controller__buttons_Bits_set
    __swig_getmethods__["Bits"] = _wiimote.wiimote_state__classic_controller__buttons_Bits_get
    if _newclass:Bits = _swig_property(_wiimote.wiimote_state__classic_controller__buttons_Bits_get, _wiimote.wiimote_state__classic_controller__buttons_Bits_set)
    TRIG_R = _wiimote.wiimote_state__classic_controller__buttons_TRIG_R
    PLUS = _wiimote.wiimote_state__classic_controller__buttons_PLUS
    HOME = _wiimote.wiimote_state__classic_controller__buttons_HOME
    MINUS = _wiimote.wiimote_state__classic_controller__buttons_MINUS
    TRIG_L = _wiimote.wiimote_state__classic_controller__buttons_TRIG_L
    DOWN = _wiimote.wiimote_state__classic_controller__buttons_DOWN
    RIGHT = _wiimote.wiimote_state__classic_controller__buttons_RIGHT
    UP = _wiimote.wiimote_state__classic_controller__buttons_UP
    LEFT = _wiimote.wiimote_state__classic_controller__buttons_LEFT
    _ZR = _wiimote.wiimote_state__classic_controller__buttons__ZR
    _X = _wiimote.wiimote_state__classic_controller__buttons__X
    _A = _wiimote.wiimote_state__classic_controller__buttons__A
    _Y = _wiimote.wiimote_state__classic_controller__buttons__Y
    _B = _wiimote.wiimote_state__classic_controller__buttons__B
    _ZL = _wiimote.wiimote_state__classic_controller__buttons__ZL
    ALL = _wiimote.wiimote_state__classic_controller__buttons_ALL
    def __init__(self): 
        """__init__(self) -> wiimote_state__classic_controller__buttons"""
        this = _wiimote.new_wiimote_state__classic_controller__buttons()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wiimote.delete_wiimote_state__classic_controller__buttons
    __del__ = lambda self : None;
wiimote_state__classic_controller__buttons_swigregister = _wiimote.wiimote_state__classic_controller__buttons_swigregister
wiimote_state__classic_controller__buttons_swigregister(wiimote_state__classic_controller__buttons)

class wiimote_state__classic_controller(_object):
    """Proxy of C++ wiimote_state__classic_controller class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wiimote_state__classic_controller, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wiimote_state__classic_controller, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CalibrationInfo"] = _wiimote.wiimote_state__classic_controller_CalibrationInfo_set
    __swig_getmethods__["CalibrationInfo"] = _wiimote.wiimote_state__classic_controller_CalibrationInfo_get
    if _newclass:CalibrationInfo = _swig_property(_wiimote.wiimote_state__classic_controller_CalibrationInfo_get, _wiimote.wiimote_state__classic_controller_CalibrationInfo_set)
    __swig_setmethods__["Button"] = _wiimote.wiimote_state__classic_controller_Button_set
    __swig_getmethods__["Button"] = _wiimote.wiimote_state__classic_controller_Button_get
    if _newclass:Button = _swig_property(_wiimote.wiimote_state__classic_controller_Button_get, _wiimote.wiimote_state__classic_controller_Button_set)
    __swig_setmethods__["JoystickL"] = _wiimote.wiimote_state__classic_controller_JoystickL_set
    __swig_getmethods__["JoystickL"] = _wiimote.wiimote_state__classic_controller_JoystickL_get
    if _newclass:JoystickL = _swig_property(_wiimote.wiimote_state__classic_controller_JoystickL_get, _wiimote.wiimote_state__classic_controller_JoystickL_set)
    __swig_setmethods__["JoystickR"] = _wiimote.wiimote_state__classic_controller_JoystickR_set
    __swig_getmethods__["JoystickR"] = _wiimote.wiimote_state__classic_controller_JoystickR_get
    if _newclass:JoystickR = _swig_property(_wiimote.wiimote_state__classic_controller_JoystickR_get, _wiimote.wiimote_state__classic_controller_JoystickR_set)
    __swig_setmethods__["RawTriggerL"] = _wiimote.wiimote_state__classic_controller_RawTriggerL_set
    __swig_getmethods__["RawTriggerL"] = _wiimote.wiimote_state__classic_controller_RawTriggerL_get
    if _newclass:RawTriggerL = _swig_property(_wiimote.wiimote_state__classic_controller_RawTriggerL_get, _wiimote.wiimote_state__classic_controller_RawTriggerL_set)
    __swig_setmethods__["RawTriggerR"] = _wiimote.wiimote_state__classic_controller_RawTriggerR_set
    __swig_getmethods__["RawTriggerR"] = _wiimote.wiimote_state__classic_controller_RawTriggerR_get
    if _newclass:RawTriggerR = _swig_property(_wiimote.wiimote_state__classic_controller_RawTriggerR_get, _wiimote.wiimote_state__classic_controller_RawTriggerR_set)
    __swig_setmethods__["TriggerL"] = _wiimote.wiimote_state__classic_controller_TriggerL_set
    __swig_getmethods__["TriggerL"] = _wiimote.wiimote_state__classic_controller_TriggerL_get
    if _newclass:TriggerL = _swig_property(_wiimote.wiimote_state__classic_controller_TriggerL_get, _wiimote.wiimote_state__classic_controller_TriggerL_set)
    __swig_setmethods__["TriggerR"] = _wiimote.wiimote_state__classic_controller_TriggerR_set
    __swig_getmethods__["TriggerR"] = _wiimote.wiimote_state__classic_controller_TriggerR_get
    if _newclass:TriggerR = _swig_property(_wiimote.wiimote_state__classic_controller_TriggerR_get, _wiimote.wiimote_state__classic_controller_TriggerR_set)
    def __init__(self): 
        """__init__(self) -> wiimote_state__classic_controller"""
        this = _wiimote.new_wiimote_state__classic_controller()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wiimote.delete_wiimote_state__classic_controller
    __del__ = lambda self : None;
wiimote_state__classic_controller_swigregister = _wiimote.wiimote_state__classic_controller_swigregister
wiimote_state__classic_controller_swigregister(wiimote_state__classic_controller)

class wiimote_state__balance_board__sensors_raw(_object):
    """Proxy of C++ wiimote_state__balance_board__sensors_raw class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wiimote_state__balance_board__sensors_raw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wiimote_state__balance_board__sensors_raw, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TopR"] = _wiimote.wiimote_state__balance_board__sensors_raw_TopR_set
    __swig_getmethods__["TopR"] = _wiimote.wiimote_state__balance_board__sensors_raw_TopR_get
    if _newclass:TopR = _swig_property(_wiimote.wiimote_state__balance_board__sensors_raw_TopR_get, _wiimote.wiimote_state__balance_board__sensors_raw_TopR_set)
    __swig_setmethods__["TopL"] = _wiimote.wiimote_state__balance_board__sensors_raw_TopL_set
    __swig_getmethods__["TopL"] = _wiimote.wiimote_state__balance_board__sensors_raw_TopL_get
    if _newclass:TopL = _swig_property(_wiimote.wiimote_state__balance_board__sensors_raw_TopL_get, _wiimote.wiimote_state__balance_board__sensors_raw_TopL_set)
    __swig_setmethods__["BottomR"] = _wiimote.wiimote_state__balance_board__sensors_raw_BottomR_set
    __swig_getmethods__["BottomR"] = _wiimote.wiimote_state__balance_board__sensors_raw_BottomR_get
    if _newclass:BottomR = _swig_property(_wiimote.wiimote_state__balance_board__sensors_raw_BottomR_get, _wiimote.wiimote_state__balance_board__sensors_raw_BottomR_set)
    __swig_setmethods__["BottomL"] = _wiimote.wiimote_state__balance_board__sensors_raw_BottomL_set
    __swig_getmethods__["BottomL"] = _wiimote.wiimote_state__balance_board__sensors_raw_BottomL_get
    if _newclass:BottomL = _swig_property(_wiimote.wiimote_state__balance_board__sensors_raw_BottomL_get, _wiimote.wiimote_state__balance_board__sensors_raw_BottomL_set)
    def __init__(self): 
        """__init__(self) -> wiimote_state__balance_board__sensors_raw"""
        this = _wiimote.new_wiimote_state__balance_board__sensors_raw()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wiimote.delete_wiimote_state__balance_board__sensors_raw
    __del__ = lambda self : None;
wiimote_state__balance_board__sensors_raw_swigregister = _wiimote.wiimote_state__balance_board__sensors_raw_swigregister
wiimote_state__balance_board__sensors_raw_swigregister(wiimote_state__balance_board__sensors_raw)

class wiimote_state__balance_board__sensors_f(_object):
    """Proxy of C++ wiimote_state__balance_board__sensors_f class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wiimote_state__balance_board__sensors_f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wiimote_state__balance_board__sensors_f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TopL"] = _wiimote.wiimote_state__balance_board__sensors_f_TopL_set
    __swig_getmethods__["TopL"] = _wiimote.wiimote_state__balance_board__sensors_f_TopL_get
    if _newclass:TopL = _swig_property(_wiimote.wiimote_state__balance_board__sensors_f_TopL_get, _wiimote.wiimote_state__balance_board__sensors_f_TopL_set)
    __swig_setmethods__["TopR"] = _wiimote.wiimote_state__balance_board__sensors_f_TopR_set
    __swig_getmethods__["TopR"] = _wiimote.wiimote_state__balance_board__sensors_f_TopR_get
    if _newclass:TopR = _swig_property(_wiimote.wiimote_state__balance_board__sensors_f_TopR_get, _wiimote.wiimote_state__balance_board__sensors_f_TopR_set)
    __swig_setmethods__["BottomL"] = _wiimote.wiimote_state__balance_board__sensors_f_BottomL_set
    __swig_getmethods__["BottomL"] = _wiimote.wiimote_state__balance_board__sensors_f_BottomL_get
    if _newclass:BottomL = _swig_property(_wiimote.wiimote_state__balance_board__sensors_f_BottomL_get, _wiimote.wiimote_state__balance_board__sensors_f_BottomL_set)
    __swig_setmethods__["BottomR"] = _wiimote.wiimote_state__balance_board__sensors_f_BottomR_set
    __swig_getmethods__["BottomR"] = _wiimote.wiimote_state__balance_board__sensors_f_BottomR_get
    if _newclass:BottomR = _swig_property(_wiimote.wiimote_state__balance_board__sensors_f_BottomR_get, _wiimote.wiimote_state__balance_board__sensors_f_BottomR_set)
    __swig_setmethods__["Total"] = _wiimote.wiimote_state__balance_board__sensors_f_Total_set
    __swig_getmethods__["Total"] = _wiimote.wiimote_state__balance_board__sensors_f_Total_get
    if _newclass:Total = _swig_property(_wiimote.wiimote_state__balance_board__sensors_f_Total_get, _wiimote.wiimote_state__balance_board__sensors_f_Total_set)
    def __init__(self): 
        """__init__(self) -> wiimote_state__balance_board__sensors_f"""
        this = _wiimote.new_wiimote_state__balance_board__sensors_f()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wiimote.delete_wiimote_state__balance_board__sensors_f
    __del__ = lambda self : None;
wiimote_state__balance_board__sensors_f_swigregister = _wiimote.wiimote_state__balance_board__sensors_f_swigregister
wiimote_state__balance_board__sensors_f_swigregister(wiimote_state__balance_board__sensors_f)

class wiimote_state__balance_board__calibration_info(_object):
    """Proxy of C++ wiimote_state__balance_board__calibration_info class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wiimote_state__balance_board__calibration_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wiimote_state__balance_board__calibration_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Kg0"] = _wiimote.wiimote_state__balance_board__calibration_info_Kg0_set
    __swig_getmethods__["Kg0"] = _wiimote.wiimote_state__balance_board__calibration_info_Kg0_get
    if _newclass:Kg0 = _swig_property(_wiimote.wiimote_state__balance_board__calibration_info_Kg0_get, _wiimote.wiimote_state__balance_board__calibration_info_Kg0_set)
    __swig_setmethods__["Kg17"] = _wiimote.wiimote_state__balance_board__calibration_info_Kg17_set
    __swig_getmethods__["Kg17"] = _wiimote.wiimote_state__balance_board__calibration_info_Kg17_get
    if _newclass:Kg17 = _swig_property(_wiimote.wiimote_state__balance_board__calibration_info_Kg17_get, _wiimote.wiimote_state__balance_board__calibration_info_Kg17_set)
    __swig_setmethods__["Kg34"] = _wiimote.wiimote_state__balance_board__calibration_info_Kg34_set
    __swig_getmethods__["Kg34"] = _wiimote.wiimote_state__balance_board__calibration_info_Kg34_get
    if _newclass:Kg34 = _swig_property(_wiimote.wiimote_state__balance_board__calibration_info_Kg34_get, _wiimote.wiimote_state__balance_board__calibration_info_Kg34_set)
    def __init__(self): 
        """__init__(self) -> wiimote_state__balance_board__calibration_info"""
        this = _wiimote.new_wiimote_state__balance_board__calibration_info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wiimote.delete_wiimote_state__balance_board__calibration_info
    __del__ = lambda self : None;
wiimote_state__balance_board__calibration_info_swigregister = _wiimote.wiimote_state__balance_board__calibration_info_swigregister
wiimote_state__balance_board__calibration_info_swigregister(wiimote_state__balance_board__calibration_info)

class wiimote_state__balance_board(_object):
    """Proxy of C++ wiimote_state__balance_board class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wiimote_state__balance_board, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wiimote_state__balance_board, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CalibrationInfo"] = _wiimote.wiimote_state__balance_board_CalibrationInfo_set
    __swig_getmethods__["CalibrationInfo"] = _wiimote.wiimote_state__balance_board_CalibrationInfo_get
    if _newclass:CalibrationInfo = _swig_property(_wiimote.wiimote_state__balance_board_CalibrationInfo_get, _wiimote.wiimote_state__balance_board_CalibrationInfo_set)
    __swig_setmethods__["Raw"] = _wiimote.wiimote_state__balance_board_Raw_set
    __swig_getmethods__["Raw"] = _wiimote.wiimote_state__balance_board_Raw_get
    if _newclass:Raw = _swig_property(_wiimote.wiimote_state__balance_board_Raw_get, _wiimote.wiimote_state__balance_board_Raw_set)
    __swig_setmethods__["AtRestKg"] = _wiimote.wiimote_state__balance_board_AtRestKg_set
    __swig_getmethods__["AtRestKg"] = _wiimote.wiimote_state__balance_board_AtRestKg_get
    if _newclass:AtRestKg = _swig_property(_wiimote.wiimote_state__balance_board_AtRestKg_get, _wiimote.wiimote_state__balance_board_AtRestKg_set)
    __swig_setmethods__["Kg"] = _wiimote.wiimote_state__balance_board_Kg_set
    __swig_getmethods__["Kg"] = _wiimote.wiimote_state__balance_board_Kg_get
    if _newclass:Kg = _swig_property(_wiimote.wiimote_state__balance_board_Kg_get, _wiimote.wiimote_state__balance_board_Kg_set)
    __swig_setmethods__["Lb"] = _wiimote.wiimote_state__balance_board_Lb_set
    __swig_getmethods__["Lb"] = _wiimote.wiimote_state__balance_board_Lb_get
    if _newclass:Lb = _swig_property(_wiimote.wiimote_state__balance_board_Lb_get, _wiimote.wiimote_state__balance_board_Lb_set)
    def __init__(self): 
        """__init__(self) -> wiimote_state__balance_board"""
        this = _wiimote.new_wiimote_state__balance_board()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wiimote.delete_wiimote_state__balance_board
    __del__ = lambda self : None;
wiimote_state__balance_board_swigregister = _wiimote.wiimote_state__balance_board_swigregister
wiimote_state__balance_board_swigregister(wiimote_state__balance_board)

class wiimote_state__motion_plus__sensors_raw(_object):
    """Proxy of C++ wiimote_state__motion_plus__sensors_raw class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wiimote_state__motion_plus__sensors_raw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wiimote_state__motion_plus__sensors_raw, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Yaw"] = _wiimote.wiimote_state__motion_plus__sensors_raw_Yaw_set
    __swig_getmethods__["Yaw"] = _wiimote.wiimote_state__motion_plus__sensors_raw_Yaw_get
    if _newclass:Yaw = _swig_property(_wiimote.wiimote_state__motion_plus__sensors_raw_Yaw_get, _wiimote.wiimote_state__motion_plus__sensors_raw_Yaw_set)
    __swig_setmethods__["Pitch"] = _wiimote.wiimote_state__motion_plus__sensors_raw_Pitch_set
    __swig_getmethods__["Pitch"] = _wiimote.wiimote_state__motion_plus__sensors_raw_Pitch_get
    if _newclass:Pitch = _swig_property(_wiimote.wiimote_state__motion_plus__sensors_raw_Pitch_get, _wiimote.wiimote_state__motion_plus__sensors_raw_Pitch_set)
    __swig_setmethods__["Roll"] = _wiimote.wiimote_state__motion_plus__sensors_raw_Roll_set
    __swig_getmethods__["Roll"] = _wiimote.wiimote_state__motion_plus__sensors_raw_Roll_get
    if _newclass:Roll = _swig_property(_wiimote.wiimote_state__motion_plus__sensors_raw_Roll_get, _wiimote.wiimote_state__motion_plus__sensors_raw_Roll_set)
    def __init__(self): 
        """__init__(self) -> wiimote_state__motion_plus__sensors_raw"""
        this = _wiimote.new_wiimote_state__motion_plus__sensors_raw()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wiimote.delete_wiimote_state__motion_plus__sensors_raw
    __del__ = lambda self : None;
wiimote_state__motion_plus__sensors_raw_swigregister = _wiimote.wiimote_state__motion_plus__sensors_raw_swigregister
wiimote_state__motion_plus__sensors_raw_swigregister(wiimote_state__motion_plus__sensors_raw)

class wiimote_state__motion_plus__sensors_f(_object):
    """Proxy of C++ wiimote_state__motion_plus__sensors_f class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wiimote_state__motion_plus__sensors_f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wiimote_state__motion_plus__sensors_f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Yaw"] = _wiimote.wiimote_state__motion_plus__sensors_f_Yaw_set
    __swig_getmethods__["Yaw"] = _wiimote.wiimote_state__motion_plus__sensors_f_Yaw_get
    if _newclass:Yaw = _swig_property(_wiimote.wiimote_state__motion_plus__sensors_f_Yaw_get, _wiimote.wiimote_state__motion_plus__sensors_f_Yaw_set)
    __swig_setmethods__["Pitch"] = _wiimote.wiimote_state__motion_plus__sensors_f_Pitch_set
    __swig_getmethods__["Pitch"] = _wiimote.wiimote_state__motion_plus__sensors_f_Pitch_get
    if _newclass:Pitch = _swig_property(_wiimote.wiimote_state__motion_plus__sensors_f_Pitch_get, _wiimote.wiimote_state__motion_plus__sensors_f_Pitch_set)
    __swig_setmethods__["Roll"] = _wiimote.wiimote_state__motion_plus__sensors_f_Roll_set
    __swig_getmethods__["Roll"] = _wiimote.wiimote_state__motion_plus__sensors_f_Roll_get
    if _newclass:Roll = _swig_property(_wiimote.wiimote_state__motion_plus__sensors_f_Roll_get, _wiimote.wiimote_state__motion_plus__sensors_f_Roll_set)
    def __init__(self): 
        """__init__(self) -> wiimote_state__motion_plus__sensors_f"""
        this = _wiimote.new_wiimote_state__motion_plus__sensors_f()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wiimote.delete_wiimote_state__motion_plus__sensors_f
    __del__ = lambda self : None;
wiimote_state__motion_plus__sensors_f_swigregister = _wiimote.wiimote_state__motion_plus__sensors_f_swigregister
wiimote_state__motion_plus__sensors_f_swigregister(wiimote_state__motion_plus__sensors_f)

class wiimote_state__motion_plus(_object):
    """Proxy of C++ wiimote_state__motion_plus class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wiimote_state__motion_plus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wiimote_state__motion_plus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Raw"] = _wiimote.wiimote_state__motion_plus_Raw_set
    __swig_getmethods__["Raw"] = _wiimote.wiimote_state__motion_plus_Raw_get
    if _newclass:Raw = _swig_property(_wiimote.wiimote_state__motion_plus_Raw_get, _wiimote.wiimote_state__motion_plus_Raw_set)
    __swig_setmethods__["Speed"] = _wiimote.wiimote_state__motion_plus_Speed_set
    __swig_getmethods__["Speed"] = _wiimote.wiimote_state__motion_plus_Speed_get
    if _newclass:Speed = _swig_property(_wiimote.wiimote_state__motion_plus_Speed_get, _wiimote.wiimote_state__motion_plus_Speed_set)
    def __init__(self): 
        """__init__(self) -> wiimote_state__motion_plus"""
        this = _wiimote.new_wiimote_state__motion_plus()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wiimote.delete_wiimote_state__motion_plus
    __del__ = lambda self : None;
wiimote_state__motion_plus_swigregister = _wiimote.wiimote_state__motion_plus_swigregister
wiimote_state__motion_plus_swigregister(wiimote_state__motion_plus)

class wiimote_state(_object):
    """Proxy of C++ wiimote_state class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wiimote_state, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wiimote_state, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CalibrationInfo"] = _wiimote.wiimote_state_CalibrationInfo_set
    __swig_getmethods__["CalibrationInfo"] = _wiimote.wiimote_state_CalibrationInfo_get
    if _newclass:CalibrationInfo = _swig_property(_wiimote.wiimote_state_CalibrationInfo_get, _wiimote.wiimote_state_CalibrationInfo_set)
    __swig_setmethods__["Button"] = _wiimote.wiimote_state_Button_set
    __swig_getmethods__["Button"] = _wiimote.wiimote_state_Button_get
    if _newclass:Button = _swig_property(_wiimote.wiimote_state_Button_get, _wiimote.wiimote_state_Button_set)
    __swig_setmethods__["Acceleration"] = _wiimote.wiimote_state_Acceleration_set
    __swig_getmethods__["Acceleration"] = _wiimote.wiimote_state_Acceleration_get
    if _newclass:Acceleration = _swig_property(_wiimote.wiimote_state_Acceleration_get, _wiimote.wiimote_state_Acceleration_set)
    __swig_setmethods__["IR"] = _wiimote.wiimote_state_IR_set
    __swig_getmethods__["IR"] = _wiimote.wiimote_state_IR_get
    if _newclass:IR = _swig_property(_wiimote.wiimote_state_IR_get, _wiimote.wiimote_state_IR_set)
    __swig_setmethods__["LED"] = _wiimote.wiimote_state_LED_set
    __swig_getmethods__["LED"] = _wiimote.wiimote_state_LED_get
    if _newclass:LED = _swig_property(_wiimote.wiimote_state_LED_get, _wiimote.wiimote_state_LED_set)
    __swig_setmethods__["BatteryRaw"] = _wiimote.wiimote_state_BatteryRaw_set
    __swig_getmethods__["BatteryRaw"] = _wiimote.wiimote_state_BatteryRaw_get
    if _newclass:BatteryRaw = _swig_property(_wiimote.wiimote_state_BatteryRaw_get, _wiimote.wiimote_state_BatteryRaw_set)
    __swig_setmethods__["BatteryPercent"] = _wiimote.wiimote_state_BatteryPercent_set
    __swig_getmethods__["BatteryPercent"] = _wiimote.wiimote_state_BatteryPercent_get
    if _newclass:BatteryPercent = _swig_property(_wiimote.wiimote_state_BatteryPercent_get, _wiimote.wiimote_state_BatteryPercent_set)
    __swig_setmethods__["bBatteryDrained"] = _wiimote.wiimote_state_bBatteryDrained_set
    __swig_getmethods__["bBatteryDrained"] = _wiimote.wiimote_state_bBatteryDrained_get
    if _newclass:bBatteryDrained = _swig_property(_wiimote.wiimote_state_bBatteryDrained_get, _wiimote.wiimote_state_bBatteryDrained_set)
    __swig_setmethods__["bRumble"] = _wiimote.wiimote_state_bRumble_set
    __swig_getmethods__["bRumble"] = _wiimote.wiimote_state_bRumble_get
    if _newclass:bRumble = _swig_property(_wiimote.wiimote_state_bRumble_get, _wiimote.wiimote_state_bRumble_set)
    __swig_setmethods__["bExtension"] = _wiimote.wiimote_state_bExtension_set
    __swig_getmethods__["bExtension"] = _wiimote.wiimote_state_bExtension_get
    if _newclass:bExtension = _swig_property(_wiimote.wiimote_state_bExtension_get, _wiimote.wiimote_state_bExtension_set)
    __swig_setmethods__["Speaker"] = _wiimote.wiimote_state_Speaker_set
    __swig_getmethods__["Speaker"] = _wiimote.wiimote_state_Speaker_get
    if _newclass:Speaker = _swig_property(_wiimote.wiimote_state_Speaker_get, _wiimote.wiimote_state_Speaker_set)
    NONE = _wiimote.wiimote_state_NONE
    NUNCHUK = _wiimote.wiimote_state_NUNCHUK
    CLASSIC = _wiimote.wiimote_state_CLASSIC
    GH3_GHWT_GUITAR = _wiimote.wiimote_state_GH3_GHWT_GUITAR
    GHWT_DRUMS = _wiimote.wiimote_state_GHWT_DRUMS
    BALANCE_BOARD = _wiimote.wiimote_state_BALANCE_BOARD
    MOTION_PLUS = _wiimote.wiimote_state_MOTION_PLUS
    PARTIALLY_INSERTED = _wiimote.wiimote_state_PARTIALLY_INSERTED
    __swig_setmethods__["ExtensionType"] = _wiimote.wiimote_state_ExtensionType_set
    __swig_getmethods__["ExtensionType"] = _wiimote.wiimote_state_ExtensionType_get
    if _newclass:ExtensionType = _swig_property(_wiimote.wiimote_state_ExtensionType_get, _wiimote.wiimote_state_ExtensionType_set)
    __swig_setmethods__["Nunchuk"] = _wiimote.wiimote_state_Nunchuk_set
    __swig_getmethods__["Nunchuk"] = _wiimote.wiimote_state_Nunchuk_get
    if _newclass:Nunchuk = _swig_property(_wiimote.wiimote_state_Nunchuk_get, _wiimote.wiimote_state_Nunchuk_set)
    __swig_setmethods__["ClassicController"] = _wiimote.wiimote_state_ClassicController_set
    __swig_getmethods__["ClassicController"] = _wiimote.wiimote_state_ClassicController_get
    if _newclass:ClassicController = _swig_property(_wiimote.wiimote_state_ClassicController_get, _wiimote.wiimote_state_ClassicController_set)
    __swig_setmethods__["BalanceBoard"] = _wiimote.wiimote_state_BalanceBoard_set
    __swig_getmethods__["BalanceBoard"] = _wiimote.wiimote_state_BalanceBoard_get
    if _newclass:BalanceBoard = _swig_property(_wiimote.wiimote_state_BalanceBoard_get, _wiimote.wiimote_state_BalanceBoard_set)
    __swig_setmethods__["MotionPlus"] = _wiimote.wiimote_state_MotionPlus_set
    __swig_getmethods__["MotionPlus"] = _wiimote.wiimote_state_MotionPlus_get
    if _newclass:MotionPlus = _swig_property(_wiimote.wiimote_state_MotionPlus_get, _wiimote.wiimote_state_MotionPlus_set)
    def __init__(self): 
        """__init__(self) -> wiimote_state"""
        this = _wiimote.new_wiimote_state()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wiimote.delete_wiimote_state
    __del__ = lambda self : None;
wiimote_state_swigregister = _wiimote.wiimote_state_swigregister
wiimote_state_swigregister(wiimote_state)

REQUEST_STATUS_EVERY_MS = _wiimote.REQUEST_STATUS_EVERY_MS
DETECT_MPLUS_EVERY_MS = _wiimote.DETECT_MPLUS_EVERY_MS
DETECT_MPLUS_COUNT = _wiimote.DETECT_MPLUS_COUNT
WIIYOURSELF_VERSION_MAJOR = _wiimote.WIIYOURSELF_VERSION_MAJOR
WIIYOURSELF_VERSION_MINOR1 = _wiimote.WIIYOURSELF_VERSION_MINOR1
WIIYOURSELF_VERSION_MINOR2 = _wiimote.WIIYOURSELF_VERSION_MINOR2
TOTAL_BUTTON_BITS = _wiimote.TOTAL_BUTTON_BITS
TOTAL_FREQUENCIES = _wiimote.TOTAL_FREQUENCIES
class wiimote__state_event(_object):
    """Proxy of C++ wiimote_state_event class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wiimote__state_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wiimote__state_event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["time_ms"] = _wiimote.wiimote__state_event_time_ms_set
    __swig_getmethods__["time_ms"] = _wiimote.wiimote__state_event_time_ms_get
    if _newclass:time_ms = _swig_property(_wiimote.wiimote__state_event_time_ms_get, _wiimote.wiimote__state_event_time_ms_set)
    __swig_setmethods__["state"] = _wiimote.wiimote__state_event_state_set
    __swig_getmethods__["state"] = _wiimote.wiimote__state_event_state_get
    if _newclass:state = _swig_property(_wiimote.wiimote__state_event_state_get, _wiimote.wiimote__state_event_state_set)
    def __init__(self): 
        """__init__(self) -> wiimote__state_event"""
        this = _wiimote.new_wiimote__state_event()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wiimote.delete_wiimote__state_event
    __del__ = lambda self : None;
wiimote__state_event_swigregister = _wiimote.wiimote__state_event_swigregister
wiimote__state_event_swigregister(wiimote__state_event)

class wiimote(wiimote_state):
    """Proxy of C++ wiimote class"""
    __swig_setmethods__ = {}
    for _s in [wiimote_state]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, wiimote, name, value)
    __swig_getmethods__ = {}
    for _s in [wiimote_state]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, wiimote, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> wiimote"""
        if self.__class__ == wiimote:
            _self = None
        else:
            _self = self
        this = _wiimote.new_wiimote(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wiimote.delete_wiimote
    __del__ = lambda self : None;
    def __eq__(self, *args):
        """__eq__(self, wiimote remote) -> bool"""
        return _wiimote.wiimote___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, wiimote remote) -> bool"""
        return _wiimote.wiimote___ne__(self, *args)

    IN_BUTTONS = _wiimote.wiimote_IN_BUTTONS
    IN_BUTTONS_ACCEL = _wiimote.wiimote_IN_BUTTONS_ACCEL
    IN_BUTTONS_ACCEL_IR = _wiimote.wiimote_IN_BUTTONS_ACCEL_IR
    IN_BUTTONS_ACCEL_EXT = _wiimote.wiimote_IN_BUTTONS_ACCEL_EXT
    IN_BUTTONS_ACCEL_IR_EXT = _wiimote.wiimote_IN_BUTTONS_ACCEL_IR_EXT
    IN_BUTTONS_BALANCE_BOARD = _wiimote.wiimote_IN_BUTTONS_BALANCE_BOARD
    def IsConnected(self):
        """IsConnected(self) -> bool"""
        return _wiimote.wiimote_IsConnected(self)

    def ConnectionLost(self):
        """ConnectionLost(self) -> bool"""
        return _wiimote.wiimote_ConnectionLost(self)

    def IsBalanceBoard(self):
        """IsBalanceBoard(self) -> bool"""
        return _wiimote.wiimote_IsBalanceBoard(self)

    def NunchukConnected(self):
        """NunchukConnected(self) -> bool"""
        return _wiimote.wiimote_NunchukConnected(self)

    def ClassicConnected(self):
        """ClassicConnected(self) -> bool"""
        return _wiimote.wiimote_ClassicConnected(self)

    def MotionPlusConnected(self):
        """MotionPlusConnected(self) -> bool"""
        return _wiimote.wiimote_MotionPlusConnected(self)

    def MotionPlusEnabled(self):
        """MotionPlusEnabled(self) -> bool"""
        return _wiimote.wiimote_MotionPlusEnabled(self)

    def MotionPlusHasExtension(self):
        """MotionPlusHasExtension(self) -> bool"""
        return _wiimote.wiimote_MotionPlusHasExtension(self)

    def IsPlayingAudio(self):
        """IsPlayingAudio(self) -> bool"""
        return _wiimote.wiimote_IsPlayingAudio(self)

    def IsPlayingSample(self):
        """IsPlayingSample(self) -> bool"""
        return _wiimote.wiimote_IsPlayingSample(self)

    def IsUsingHIDwrites(self):
        """IsUsingHIDwrites(self) -> bool"""
        return _wiimote.wiimote_IsUsingHIDwrites(self)

    def IsRecordingState(self):
        """IsRecordingState(self) -> bool"""
        return _wiimote.wiimote_IsRecordingState(self)

    def TotalConnected():
        """TotalConnected() -> unsigned int"""
        return _wiimote.wiimote_TotalConnected()

    if _newclass:TotalConnected = staticmethod(TotalConnected)
    __swig_getmethods__["TotalConnected"] = lambda x: TotalConnected
    __swig_setmethods__["CallbackTriggerFlags"] = _wiimote.wiimote_CallbackTriggerFlags_set
    __swig_getmethods__["CallbackTriggerFlags"] = _wiimote.wiimote_CallbackTriggerFlags_get
    if _newclass:CallbackTriggerFlags = _swig_property(_wiimote.wiimote_CallbackTriggerFlags_get, _wiimote.wiimote_CallbackTriggerFlags_set)
    def ChangedNotifier(self, *args):
        """ChangedNotifier(self, state_change_flags changed, wiimote_state new_state)"""
        return _wiimote.wiimote_ChangedNotifier(self, *args)

    def GetButtonNameFromBit(*args):
        """GetButtonNameFromBit(unsigned int index) -> char"""
        return _wiimote.wiimote_GetButtonNameFromBit(*args)

    if _newclass:GetButtonNameFromBit = staticmethod(GetButtonNameFromBit)
    __swig_getmethods__["GetButtonNameFromBit"] = lambda x: GetButtonNameFromBit
    def GetClassicButtonNameFromBit(*args):
        """GetClassicButtonNameFromBit(unsigned int index) -> char"""
        return _wiimote.wiimote_GetClassicButtonNameFromBit(*args)

    if _newclass:GetClassicButtonNameFromBit = staticmethod(GetClassicButtonNameFromBit)
    __swig_getmethods__["GetClassicButtonNameFromBit"] = lambda x: GetClassicButtonNameFromBit
    def GetFreqLookup(*args):
        """GetFreqLookup(unsigned int index) -> unsigned int"""
        return _wiimote.wiimote_GetFreqLookup(*args)

    if _newclass:GetFreqLookup = staticmethod(GetFreqLookup)
    __swig_getmethods__["GetFreqLookup"] = lambda x: GetFreqLookup
    FIRST_AVAILABLE = _wiimote.wiimote_FIRST_AVAILABLE
    def Connect(self, *args):
        """
        Connect(self, unsigned int wiimote_index = FIRST_AVAILABLE, bool force_hidwrites = False) -> bool
        Connect(self, unsigned int wiimote_index = FIRST_AVAILABLE) -> bool
        Connect(self) -> bool
        """
        return _wiimote.wiimote_Connect(self, *args)

    def Disconnect(self):
        """Disconnect(self)"""
        return _wiimote.wiimote_Disconnect(self)

    def SetReportType(self, *args):
        """
        SetReportType(self, input_report type, bool continuous = False)
        SetReportType(self, input_report type)
        """
        return _wiimote.wiimote_SetReportType(self, *args)

    def EnableMotionPlus(self):
        """EnableMotionPlus(self) -> bool"""
        return _wiimote.wiimote_EnableMotionPlus(self)

    def DisableMotionPlus(self):
        """DisableMotionPlus(self) -> bool"""
        return _wiimote.wiimote_DisableMotionPlus(self)

    def CalibrateAtRest(self):
        """CalibrateAtRest(self)"""
        return _wiimote.wiimote_CalibrateAtRest(self)

    def RefreshState(self):
        """RefreshState(self) -> state_change_flags"""
        return _wiimote.wiimote_RefreshState(self)

    def Reset(self):
        """Reset(self)"""
        return _wiimote.wiimote_Reset(self)

    def SetLEDs(self, *args):
        """SetLEDs(self, unsigned char led_bits)"""
        return _wiimote.wiimote_SetLEDs(self, *args)

    def SetRumble(self, *args):
        """SetRumble(self, bool on)"""
        return _wiimote.wiimote_SetRumble(self, *args)

    def RumbleForAsync(self, *args):
        """RumbleForAsync(self, unsigned int milliseconds)"""
        return _wiimote.wiimote_RumbleForAsync(self, *args)

    def MuteSpeaker(self, *args):
        """MuteSpeaker(self, bool on) -> bool"""
        return _wiimote.wiimote_MuteSpeaker(self, *args)

    def EnableSpeaker(self, *args):
        """EnableSpeaker(self, bool on) -> bool"""
        return _wiimote.wiimote_EnableSpeaker(self, *args)

    def PlaySquareWave(self, *args):
        """
        PlaySquareWave(self, speaker_freq freq, unsigned char volume = 0x40) -> bool
        PlaySquareWave(self, speaker_freq freq) -> bool
        """
        return _wiimote.wiimote_PlaySquareWave(self, *args)

    def PlaySample(self, *args):
        """
        PlaySample(self, wiimote_sample sample, unsigned char volume = 0x40, 
            speaker_freq freq_override = FREQ_NONE) -> bool
        PlaySample(self, wiimote_sample sample, unsigned char volume = 0x40) -> bool
        PlaySample(self, wiimote_sample sample) -> bool
        """
        return _wiimote.wiimote_PlaySample(self, *args)

    def Load16bitMonoSampleWAV(*args):
        """Load16bitMonoSampleWAV(char filepath, wiimote_sample out) -> bool"""
        return _wiimote.wiimote_Load16bitMonoSampleWAV(*args)

    if _newclass:Load16bitMonoSampleWAV = staticmethod(Load16bitMonoSampleWAV)
    __swig_getmethods__["Load16bitMonoSampleWAV"] = lambda x: Load16bitMonoSampleWAV
    def Load16BitMonoSampleRAW(*args):
        """Load16BitMonoSampleRAW(char filepath, bool _signed, speaker_freq freq, wiimote_sample out) -> bool"""
        return _wiimote.wiimote_Load16BitMonoSampleRAW(*args)

    if _newclass:Load16BitMonoSampleRAW = staticmethod(Load16BitMonoSampleRAW)
    __swig_getmethods__["Load16BitMonoSampleRAW"] = lambda x: Load16BitMonoSampleRAW
    def Convert16bitMonoSamples(*args):
        """
        Convert16bitMonoSamples(short samples, bool _signed, long length, speaker_freq freq, 
            wiimote_sample out) -> bool
        """
        return _wiimote.wiimote_Convert16bitMonoSamples(*args)

    if _newclass:Convert16bitMonoSamples = staticmethod(Convert16bitMonoSamples)
    __swig_getmethods__["Convert16bitMonoSamples"] = lambda x: Convert16bitMonoSamples
    UNTIL_STOP = _wiimote.wiimote_UNTIL_STOP
    def RecordState(self, *args):
        """
        RecordState(self, state_history events_out, unsigned int max_time_ms = UNTIL_STOP, 
            state_change_flags change_trigger = CHANGED_ALL)
        RecordState(self, state_history events_out, unsigned int max_time_ms = UNTIL_STOP)
        RecordState(self, state_history events_out)
        """
        return _wiimote.wiimote_RecordState(self, *args)

    def StopRecording(self):
        """StopRecording(self)"""
        return _wiimote.wiimote_StopRecording(self)

    def __disown__(self):
        self.this.disown()
        _wiimote.disown_wiimote(self)
        return weakref_proxy(self)
wiimote_swigregister = _wiimote.wiimote_swigregister
wiimote_swigregister(wiimote)

def wiimote_TotalConnected():
  """wiimote_TotalConnected() -> unsigned int"""
  return _wiimote.wiimote_TotalConnected()

def wiimote_GetButtonNameFromBit(*args):
  """wiimote_GetButtonNameFromBit(unsigned int index) -> char"""
  return _wiimote.wiimote_GetButtonNameFromBit(*args)

def wiimote_GetClassicButtonNameFromBit(*args):
  """wiimote_GetClassicButtonNameFromBit(unsigned int index) -> char"""
  return _wiimote.wiimote_GetClassicButtonNameFromBit(*args)

def wiimote_GetFreqLookup(*args):
  """wiimote_GetFreqLookup(unsigned int index) -> unsigned int"""
  return _wiimote.wiimote_GetFreqLookup(*args)

def wiimote_Load16bitMonoSampleWAV(*args):
  """wiimote_Load16bitMonoSampleWAV(char filepath, wiimote_sample out) -> bool"""
  return _wiimote.wiimote_Load16bitMonoSampleWAV(*args)

def wiimote_Load16BitMonoSampleRAW(*args):
  """wiimote_Load16BitMonoSampleRAW(char filepath, bool _signed, speaker_freq freq, wiimote_sample out) -> bool"""
  return _wiimote.wiimote_Load16BitMonoSampleRAW(*args)

def wiimote_Convert16bitMonoSamples(*args):
  """
    wiimote_Convert16bitMonoSamples(short samples, bool _signed, long length, speaker_freq freq, 
        wiimote_sample out) -> bool
    """
  return _wiimote.wiimote_Convert16bitMonoSamples(*args)

__all__ = []
def __cleanup_namespace():
  ''' Cleanup exported variables, to reduce bloat in the module.
      Removes _swigregister functions and undoes the promote-to-global
      modification which was applied earlier. '''
  class NullClass:
    pass
  for i in globals().copy():
    if i.endswith("_swigregister"):
      del globals()[i]
    elif '__' in i and not i.startswith('__') and not i.endswith('__'):
      # This name was promoted to global scope to help SWIG, as SWIG
      # cannot yet handle nested structs. The following code undoes the
      # promotion and puts the struct back to the proper place.
      path = i.split('__')
      # "super-mkdir" for objects
      for k in range(1,len(path)):
        par = '.'.join(path[:k])
        parobj = eval(par)
        if not hasattr(parobj,path[k]):
          setattr(parobj,path[k],NullClass)
      obj = globals()[i]
      setattr(parobj,path[k],obj)
      obj.__name__ = '.'.join(path)
    elif '__' not in i and not i.startswith('_') and i not in ['weakref', 'weakref_proxy']:
      __all__.append(i)
__cleanup_namespace()
del __cleanup_namespace

# export arrays from C
wiimote.ButtonNameFromBit = tuple([wiimote.GetButtonNameFromBit(i) for i in range(TOTAL_BUTTON_BITS)])
wiimote.ClassicButtonNameFromBit = tuple([wiimote.GetClassicButtonNameFromBit(i) for i in range(TOTAL_BUTTON_BITS)])
wiimote.FreqLookup = tuple([wiimote.GetFreqLookup(i) for i in range(TOTAL_FREQUENCIES)])
del i



